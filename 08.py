import numpy as np
import pandas as pd
from scipy import stats
import matplotlib.pyplot as plt

# 1. Даны значения величины заработной платы заемщиков банка (zp) и значения их поведенческого кредитного скоринга (ks):
# zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110],
# ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832].
# Найдите ковариацию этих двух величин с помощью элементарных действий, а затем с помощью функции cov из numpy
# Полученные значения должны быть равны.
# Найдите коэффициент корреляции Пирсона с помощью ковариации и среднеквадратичных отклонений двух признаков,
# а затем с использованием функций из библиотек numpy и pandas.

zp = np.array([35, 45, 190, 200, 40, 70, 54, 150, 120, 110])
ks = np.array([401, 574, 874, 919, 459, 739, 653, 902, 746, 832])

plt.scatter(zp, ks)
plt.xlabel('zp')
plt.ylabel('ks', rotation=90)
plt.show()

print("Задание 1")
print("Ковариация с помощью элементарных действий:", (zp * ks).mean() - zp.mean() * ks.mean())
print("Ковариация с помощью функции cov из numpy: \n", np.cov(zp, ks, ddof=0))
print("Коэффициент корреляции Пирсона с помощью ковариации и среднеквадратичных отклонений двух признаков:",
      ((zp * ks).mean() - zp.mean() * ks.mean()) / (zp.std() * ks.std()))
print("Коэффициент корреляции Пирсона с использованием функций из библиотек numpy: \n", np.corrcoef(zp, ks))
print("Коэффициент корреляции Пирсона с использованием функций из библиотек pandas: \n",
      pd.DataFrame(data={'zp': zp, 'ks': ks}).corr())
print()

# 2. Измерены значения IQ выборки студентов,
# обучающихся в местных технических вузах:
# 131, 125, 115, 122, 131, 115, 107, 99, 125, 111.
# Известно, что в генеральной совокупности IQ распределен нормально.
# Найдите доверительный интервал для математического ожидания с надежностью 0.95.

x = np.array([131, 125, 115, 122, 131, 115, 107, 99, 125, 111])
alpha = 0.05
print("Задание 2")
print("Доверительный интервал для математического ожидания с надежностью 0.95: (",
      np.mean(x) - stats.t.ppf(1 - alpha / 2, len(x) - 1) * np.std(x, ddof=1) / np.sqrt(len(x)), ",",
      np.mean(x) + stats.t.ppf(1 - alpha / 2, len(x) - 1) * np.std(x, ddof=1) / np.sqrt(len(x)), ")")
print()

# 3. Известно, что рост футболистов в сборной распределен нормально с дисперсией генеральной совокупности,
# равной 25 кв.см. Объем выборки равен 27, среднее выборочное составляет 174.2. Найдите доверительный интервал
# для математического ожидания с надежностью 0.95.

n = 27
m = 174.2
sig = 25
z = -stats.norm.ppf(alpha / 2)
print("Задание 3")
print("Доверительный интервал для математического ожидания с надежностью 0.95: (",
      m - z * np.sqrt(sig) / np.sqrt(n), ",",
      m + z * np.sqrt(sig) / np.sqrt(n), ")")
print()
